MRC p15, 0, r1, c1, c0, 0 ; read CP15 Register 1 
ORR r1, r1, #0x1 	  ; bit 0 to 1 to enable MMU
MCR p15, 0, r1, c1, c0, 0 ; enable MMUs


Once MMU is enabled:
page table stuff:
cp15 c0, c2, ...


ALL WRONG
#will start with static mapping.
#TLB entry overview:
#CAM with VA tag (to see if translation is in the table) and preserved and valid bits, and size info
#31:12 11:4 3        2     1:0
#VATAG rsrv preserve valid page size (0x3 for 16MB)
#RAM with virtual address tag as well as the endianness, element size, and mixed parameters
#31:12 11:10 9          8:7       6     5:0
#PATAG rsrv  endianness elem size mixed reserved

for 16MB pages it shoudl be 31:24 bits for the tag

3.2.57 in Coretex-A8 manual for shoving entries into te TLB
WE NEED PAGE TABLES, A WALK WILL BE PERFORMED


---
was brought into the TLB with the ASID that matches the current value held in the CONTEXTIDR, 
see c13, Context ID Register (CONTEXTIDR) on pageB3-153. 
... not sure exactly what the entries should look like in the TLB
---

 --
[_] mmu during caches		
[_] mmu before caches		
[_] mmu after caches		
try enabling caches...
try enabling MMU without anything...
how to do flat mapping?
In ARMv7 Arch Reference
- Address Space ID (ASID) distinguishes between global and process specific mappings
- FORMAT:
  31-24             23-20 19 18 17 16 15    14-12 11-10   9-5  4  3 2 1 0
  base address (PA) rsrv  NS 1  nG S  AP[2] TEX   AP[1:0] rsrv NX C B 1 0
                                0  0                           0
                                "Not Global" bit should be 0
                                   Shared bit should be 0      "Execute Never" bit should be 0
need to cover
0x80000000 # code, then kmalloc space
                            | supersection index
VA = 0x80000000 = b1000 0000 0000 0000 0000 0000 0000 0000
                     table index |
fld at addr Y
page table is                  |
YYYYYYYYYYYYYYYYYY10000000000000
but must also go to
YYYYYYYYYYYYYYYYYY10000000111100
12 bits for table index
and must map to 0x8000 0000


0x4020ffc8 # vectors
0x48...... # hardware
0x49...... # hardware
0x2B...... # ETH2_BASE
0x2C...... # ETH1_BASE
0x8FFFFFFF # kernel stack (earth)
0xA0000000 # kernel stack (tide)
